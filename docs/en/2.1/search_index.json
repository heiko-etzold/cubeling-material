[["Introduction.html", "Cubeling – Teachers’ Guide Introduction About this “book” Licenses and versions of this book", " Cubeling – Teachers’ Guide Heiko Etzold, translated by Joanna Radack version 2.1, April 2022; optimized for version 7.1 of Cubeling App cite as: Etzold, H. (2022). Cubeling – Teachers’ Guide (version 2.1). https://heiko-etzold.github.io/cubeling-material/en/2.1 Introduction Wooden cubes fascinate children and adults alike – even before doing any math with them. This enthusiasm is worth taking advantage of! Especially in geometry lessons, but also beyond that, there are numerous occasions to use cubes to approach mathematical topics. Of course this works with actual wooden cubes, pretty well actually. Should experiences like that really be replaced by an app? No! But those experiences can be wonderfully expanded upon. Here, a few special features come into play that only digital tools can provide. These lead to further spatial cognition or more opportunities to support and challenge your students. The Cubeling app introduced here is available free of charge for iOS and macOS devices (i.e. iPads, Macs, and, to a limited extent, iPhones) under https://apps.apple.com/en/app/cubeling/id1027746349. About this “book” The first chapter of this document will provide instructions as to how to use the app itself. The following chapters will include possible applications for teaching mathematics – on one hand with a focus on spatial imagination, on the other on coding in connection with the building of cube structures. The contents of this book are not set in stone. Over time, things will be added or sometimes changed. We will also gladly take up any suggestions in order to share more ideas on how to use the Cubeling app in the classroom. The current version of this book refers to the Cubeling app of the version 7.1, but many functions are also available with earlier versions. The book, especially chapter 3, builds on a previous, two-part guide (view Etzold &amp; Janke (2018a) and Etzold &amp; Janke (2018b)). The book is written in a way that makes it easy to read cover to cover, but it is also intended to function as a quick reference work. Tasks for students can be found in the colored text boxes. Gray text boxes provide further hints that can, for example, be used in class discussions. In addition, didactic comments on individual topics are scattered throughout the book. Tips on which materials are suitable for certain teaching situations and which settings are needed in the Cubeling app are also given. Additional material, like the compilation of all tasks and worksheets referred to in the individual sections, can be found at the end of the book. Licenses and versions of this book This material is an open educational resource and is licensed under the Creative-Commons attribution ShareAlike 4.0 (CC BY-SA 4.0). To view a copy of this license, visit https://creativecommons.org/licenses/by-sa/4.0/deed.en. It is both possible and desired to freely use, modify, and develop the material and publish it accordingly. If appropriate, changes or additions, such as translated contents, can also be included in the book itself – simply contact me for that. The raw data of the book is available at https://github.com/heiko-etzold/cubeling-material. There, via a GIT-repository, earlier versions and the changes can be tracked. An overview of all versions of the book can be found at https://heiko-etzold.github.io/cubeling-material. "],["how-to-use.html", "1 How to use the Cubeling app 1.1 Basic actions with cubes 1.2 Global settings 1.3 Modify and switch views 1.4 Export and import 1.5 How to work with the code view", " 1 How to use the Cubeling app 1.1 Basic actions with cubes When you open the app, you will see a split screen: a 3D view on the left and the building plan on the right. Fig. 1.1: App launch screen The app uses two basic actions: Add cube To add a cube, tap on one of the dark or light gray squares. You can, of course, also place a cube on top of another one, and another one, and so on – simply tap on the respective cube again and again. Remove cube Touch and hold a cube to remove it. This explanation can also be found in the app by tapping on the i at the bottom left. You can add and remove cubes in both the 3D view and in the building plan mode1. When you change something in one view, the same modification is immediately and automatically adopted in the other view. The trash can button at the bottom center allows you to delete the entire connected cube structure. Didactic note Naturally, the actions add cube and remove cube also exist when working with real cubes. In the app, however, there are relatively strong constraints for this: You do not have to first pick up a cube, you do not have to align it perfectly to the checkerboard pattern, you do not have to let it go – the only thing you have to do is click on the square where you want it. On the one hand, you lose out on a range of real, haptic experiences (which goes to show that you should not forgo real cubes entirely). On the other hand, this gives students with motor impairments the opportunity to solve more complex tasks with the help of cube structures, which they might not be able to do with real objects. 1.2 Global settings In the main settings app on your device2 you can set your preferences for the app. Fig. 1.2: App settings You can decide whether the colored coordinate axes should be displayed and if they should be labeled with numbers. You can also change the size of the board – ranging between 3x3 and 10x10. Additionally, you can choose between wooden cubes, stackable cubes, and magic cubes. Apart from the slight visual differences between the cubes, there is also a difference in their building behavior. Wooden cubes can only be stacked on top of each other, i.e., a cube always needs to lie either on top of another cube or directly on the board. Stackable cubes, on the contrary, can also be attached laterally. This plays a role when removing cubes as well: Wooden cubes can only be removed from top to bottom, whereas stacking cubes can be removed freely, as long as no cubes would be floating mid-air. Magic cubes can float. The construction is the same as with wooden cubes, but you can remove magic cubes freely, so that it is possible to have floating cubes remain. You can also decide whether loops and variables are possible in the code view. You can find more on this in section 1.5. 1.3 Modify and switch views 1.3.1 Rotate and zoom into connected cube structure Rotate the 3D view using one finger and zoom in or out with two. This practically gives you the ability to move around the cube structure (view the structure from all sides). It is also possible to view the structure from below. 1.3.2 Shadow walls and transparency By clicking on the three dots at the bottom left, you can build shadow walls and increase the transparency of the cubes. Fig. 1.3: Configuring the shadow walls 1.3.3 Outline Via the same three dots, you can also set your ability to see the outline of the built cube structure. You can choose between the regular cubes (sun), the disappearance of contours (cloud) or completely blacked out cubes (moon). Fig. 1.4: Outline of connected cube structure 1.3.4 Further views You can use the toggle buttons at the bottom to switch between views. On the left, you have the, by now familiar, 3D view and the building plan. On the right, in addition to the building plan, you can choose between the multiview orthographic projection, the oblique view in cavalier perspective, the isometric view, and (for wooden cubes) a code view. Again, if you change something in one view, you will immediately see the change in the others as well. However, cubes cannot be added when you are in the multiview orthographic projection or one of the oblique views – this is only possible in the 3D view and (for wooden cubes) in the building plan as well as the code view. It is still possible to completely hide the left or right view via the toggles at the respective corners. Hiding a view can be useful if, for example, you provide a building plan and have your students build the connected cube structure using real cubes. Then, they can use the app to check their creations. 1.3.4.1 Multiview orthographic projection If you choose the multiview orthographic projection, a red bar will appear in both individual views, with a small cube at the end on one side and a small sphere on the other. This bar acts a way to orient yourself should the 3D view ever be wildly rotated. This is especially helpful if you have switched off the blue and green axes in the global settings. Fig. 1.5: Multiview orthographic projection If you are in the multiview orthographic projection and zoom out with two fingers, a third pane – the side view – will appear. 1.3.5 Oblique projections The two oblique views also display the cube structure. In the isometric view, a small red stick can been seen between the squares (2|2) and (3|3). This can aid in the interpretation of the representations. Fig. 1.6: Isometric view 1.3.6 Code-view This function is only available when using wooden cubes and never on iPhones. There is also a code view, which documents the building process of the cube structure. Here, once again, a variety of actions are possible, which will be discussed in more detail in chapter 1.5. Fig. 1.7: Code view 1.4 Export and import If you click on the folder button in the middle (next to the trash can), it is possible to export the entire connected cube structure or individual views, as well as open a previously saved cube structure. Fig. 1.8: Export and import 1.4.1 Export views as images Select which of the six views you want to export. Then you can save or share them as png-files. 1.4.2 Export code as text This function is only available when using wooden cubes and never on iPhones. The code documenting the construction process of the cube structure can be saved or shared as a txt-file. 1.4.3 Save connected cube structure Click here to save or share the entire cube structure, including all the settings that were used during its build. The exported file is a cubl file, a custom file format for the Cubeling app. If you share a cube structure (via AirDrop or email, for example) with your students who also have the Cubeling app, they can immediately open the cube structure on their devices. 1.4.4 Open connected cube structure If a cubl file is saved on the device, you can click here to open it. It is also possible to open files that were created with older version of the Cubeling app (up to version 6.0, these are then cubeling-files), but it might be that not all settings are transferred. 1.5 How to work with the code view In the code view, the first thing that is documented is which cubes are added or removed in either the 3D view or building plan. Fig. 1.9: Coding with Cubeling 1.5.1 Add a line of code It is possible to add commands yourself. For this, the corresponding buttons at the bottom of the code view need to be selected: buildCube(at: (number,number)) inserts a cube at the specified coordinates. removeCube(at: (number,number)) removes a cube (should it exist). Provided that loops are allowed in the global setting, the following are also possible: do counting number times {…} creates a repetition so that the command in the curly brackets is executed the specified number of times. If variables are also allowed in the global settings, further commands exist: position = (number,number) creates a variable, for example positionA. Change a variable in one direction with change(position, by: (number,number)), for example change(positionA, by: (1,0)). With buildCube(at: position)) and removeCube(at: position), you can now use the positions to add or remove cubes there. You can change where a line of code is inserted via the gray arrow on the left edge of the code view. Fig. 1.10: Change build location 1.5.2 Remove a line of code To remove a line of code, swipe it left. A trash can with red backdrop will appear, which you can use to delete that line. Fig. 1.11: Delete line of code 1.5.3 Move a line of code Rearrange code elements via the three lines at the right edge of the code. Fig. 1.12: Rearrange lines of code At this point, it could be interesting to see how changing the order of lines of code changes the resulting cube structure. As long as only buildCube commands are used, this does produce very exciting results. But as soon as loops or variables are included, or the removeCube command is used, this can lead to interesting discoveries. You can also drag individual lines of code into or out of existing loops. 1.5.4 Changing numbers There are two ways to change the numbers, like those used to describe the coordinates, in your code. In both cases, you first have to tap on the number itself. You can now use the number pad to enter the numbers, just like on a computer keyboard. The ±-key allows you to quickly turn a number into its opposite number. You can use the arrow keys to increase or decrease the numbers step by step. Fig. 1.13: Change numbers 1.5.5 Code tracing Clicking on the play button below the code starts the code tracing. Using the arrows, the code can now be executed one step at a time. In this way, it is possible to retrace the individual construction steps. This is particularly interesting if loops were used. If a loop is being traced, the number of the current pass is displayed. Accordingly, at the end of the loop, it is decided whether it starts again or if it continues to the next line of code. Moreover, it is possible to have the current value of a position displayed. This is relevant if the value of a position changes within a loop and this change is to be understood. Fig. 1.14: Code tracing In the building plan view, you can only add or remove cubes if you have selected wooden cubes, otherwise the uniqueness of the structure could not be guaranteed↩︎ This is the app with the gray gear symbol. Open it and scroll down until you find the Cubeling app. If you are using the Cubeling app on a Mac, you can open the settings in the menu bar by clicking Cubeling → Preferences.↩︎ "],["Raumvorstellung.html", "2 Build with Cubeling", " 2 Build with Cubeling This chapter is currently not existant. Until then you can find some inspiration how to use the Cubeling App in connection with teaching spatial abilities (in German) at Ladel &amp; Kuzle (2017), Bönig &amp; Thöne (2018), Pilgrim (2018), PIKAS digi (2020) or Rahn &amp; Dilling (2020). "],["Coding.html", "3 Programming with Cubeling 3.1 Classification and goals 3.2 Introduction to processes of description 3.3 Working with the code view 3.4 Loops and loop variables 3.5 Advanced exercises 3.6 Summary and next steps", " 3 Programming with Cubeling The goal of this section is not to turn your students into programmers with the help of digital cubes. Rather, the aim is to develop a feeling for an algorithmic perspective on building connected cube structures and to focus on the process of construction. This process is documented, made translatable for a computer, and basic coding structures like loops are made visible to showcase the potential of these structures. Cubeling’s code view was developed in connection with a trial at a school in Brandenburg. Based on the experiences gained in that project week, this chapter presents a possible sequence of four teaching blocks that can be used to explore coding in the Cubeling app. Of course, a more spread out and gradual incorporation into math lessons is also possible. 3.1 Classification and goals Coding with Cubeling addresses skills in the fields of both mathematics and media informatics. HIER BEZUG ZU DEUTSCHEN BILDUNGSKONTEXT ERWÄHNEN Mathematics Educational Standards. With regard to the educational standards for primary school level (KMK, 2005), the competency of representation is particularly encouraged: Students can create, select, and use appropriate representations for working on mathematical problems and can compare and evaluate representations with one another. At secondary school levels (KMK, 2004), the concept also furthers the competencies use of mathematical representations (especially creating and using standard representations of mathematical objects and situations, interpreting or modifying given representations reasonably, evaluating different representations and forms of representation in a purpose-oriented way) and dealing with symbolic, technical, and formal elements of mathematics (here specifically, using mathematical aids and digital mathematical tools directly, applying formal mathematical procedures, and selecting and using digital mathematical tools efficiently depending on the situation and purpose). This is all implemented in the app’s concept with particularly the guiding principle of space and shape in mind. The individual tasks most definitely also address numerous other general and content-related mathematical competencies, but the ones mentioned here represent the main goals of the concept. KMK: Education in the digital world. The concept also contributes to fulfilling some of the competencies that were issued by the Standing Conference of the Ministers of Education and Cultural Affairs conference in their strategy for “Education in the digital world” (KMK, 2016). Particularly noteworthy here are: Recognizing and formulating algorithms (5.5), Knowing and understanding operating principles and basic principles of the digital world (5.5.1), Recognizing and formulating algorithmic structures in the digital tools used (5.5.2), and planning and using a structured, algorithmic sequence to solve a problem (5.5.3). D-EDK: Media and Informatics. In the Curriculum 21 on the subject of “Media and Informatics” (D-EDK, 2016) issued by the German-Swiss conference of Directors of Education, some more detailed goals for education in connection with digital media are stated, which are targeted when coding with the Cubeling app. Particular emphasis in put on the following competencies (MI2.2): Students can read and manually execute simple sequences with loops and parameters; they understand that a computer can only execute predefined instructions and that a program is a sequence of such instructions; they can write and test programs with loops and parameters; they can formulate their own algorithms in the form of functioning and correct computer programs with variables; and they can compare and evaluate different algorithms for solving the same problem. Self-discovery is of particular importance here. The experiences gained in cube building tasks lead to the discovery of general methods, which can be tested for effectiveness and efficiency during coding and possibly improved. The fact that this has to be done in a playful and action-oriented way is realized by the building of cube structures and the connections drawn to experiences from math lessons. 3.2 Introduction to processes of description You will need: About 10 small wooden cubes per student; Dice; iPads with the Cubeling app installed; Worksheet (tasks 1 to 4); Possibly the presentation with tasks Recommended app settings: Number of rows/columns: 7; Wooden cubes; Show coordinate numbers and colored axes; No loops or variables 3.2.1 Motivation and familiarization phase Since we carried out this project in a class that we were not familiar with, we prefaced the actual topic of the lesson with a familiarization phase. This phase, of course, also included mentions of cubes. If you already know the class, you can use similar tasks for motivation, perhaps also as homework, or you omit this phase altogether. As a warm-up and a means to get to know each other, the students were given the following task: Task Toss a die and do all actions that are assigned to a number less than or equal to the one you rolled: 1 Make yourself a name tag! 2 Write an adjective in front of your name that begins with the same letter as your first name! 3 Draw a small picture on your name tag that has something to do with your favorite hobby! 4 Estimate how many cubes each of your classmates would have to take out of the box so that all children have the same number of cubes. Write this number on your name tag! 5 Think about what animal living in the forest you would most like to be and draw or write it on your name tag! 6 Try to recreate this animal using the cubes. A large box with wooden cubes was placed on the teacher’s desk. We used wooden cubes of the size 2 x 2 x 2 cm.3 The first pragmatic purpose was clearly the creation of the name tags. In addition, this task also includes the deliberate estimation of quantities, and the last task even already touches on the upcoming activities with the cubes. This phase already allows for various differentiation possibilities: Students who were able to finish their (few) tasks early can help others or complete further tasks voluntarily. 3.2.2 Formulating the goal After this activity, the goal of the project was explained, namely that cube structures are to be created with the help of computers. As a small preview of what creative realms this can lead to, the popular game “Minecraft” was referenced, to which students reacted enthusiastically. Concrete knowledge about the computer game on the part of the teacher is not necessary. It is merely a matter of motivating the students and finding ties to their own lives. Lesson goal We want to use computers to build connected cube structures. The computer helps us to build relatively complex structures in a quick way. 3.2.3 Describing a cube Since computers are not “thinking entities” per se, they always need to be told exactly what to do. This situation was playfully analogized by a fictitious encounter with an alien. Imagine an alien standing in front of your door tomorrow morning. It has learned your language quickly due to its high intelligence, but it has never come across a shape that is not round. For your new board game, however, you need a cube?. Try to explain to the creature what a cube is. Act out the situation with the person sitting next to you by pretending to be the alien! The alien here is completely unknowledgeable and should ask critical questions if it does not understand something. Afterwards, switch roles. Especially the last point should be emphasized by the teacher, because the students in our session tended to take their previous knowledge as given and “probed” the other student less. But that is exactly the goal of the exercise! The point is to describe the shape of a cube as clearly and precisely as possible, so that everyone is able to unambiguously conceive this object. The alien serves as a representative object, for which it is necessary to describe with exactness. Due to the openness of the task, there is no one correct solution. Therefore, in our case, the students tried to draw, build, or use terms like “corners,” “sides,” or “edges” to describe the shape. Depending on how much time you want to take for this task, you could discuss when a cube is mathematically well-defined or not. It is important to work out the different ways in which the descriptions were carried out: verbally, through gestures, graphically, crafting, etc. In each of these cases, it can be discussed that an unambiguous, unequivocal description is not so easy. The advantages and disadvantages of each method of description can also be discussed. Describing cubes, cube structures, or the construction process itself will be a common thread throughout the entire lesson. The alien situation has demonstrated the necessity of describing something and can now be referred back to in the further course of the lesson. 3.2.4 Describing cube structures The next step is now to describe a more complex shape: a connected cube structure. The students received the following task: Put a privacy shield between you and the person sitting next to you. Think of a cube structure with 10 cubes and build it on your side. Next, explain to your partner how they can build this structure. Then, compare your cube structures and switch roles. What problems arose when describing the building process of the cube structure? The goal of this task is for students to recognize that it could be helpful to not only describe the finished structure, but also the process of how it was built. It also trains the development of a “command system”: Students had to think very carefully about which actions to mention without being misunderstood. Similar to the previous task, a wide variety of solutions were presented. For example, students divided their structures into smaller “easier units” , such as a row, a tower, or a 2 x 2 x 2 cube. They even gave interesting instructions like, “Make a 2 x 4 rectangle!” A further approach was to number the pieces and positions on the table - similar to a coordinate system or a chessboard. Most agreed, when discussing it as a class, that it makes the most sense to start with one cube and to then describe the next moves by using its spatial directions to specify on which side a certain number cubes should be placed. Instead of only “building” the structure, one group even described a larger, easier shape and then had cubes removed from it. Many of these ideas and approaches are helpful to call on later when the students are “coding.” For example, the breaking down into “smaller units” is an essential approach in informatics and is reflected in the coding in the Cubeling app (e.g. building a row using loops). The idea of numbering is particularly prominent in the app through the checkerboard pattern and the desire for concrete locations of the cubes. Positions and changes of position can be used to specify exactly in what direction the cubes are to be built, and the idea of removing cubes from a larger shape will also be found in a similar form in a later exercise. 3.2.5 Free exploration of the app Compared to the alien situation, it is now the iPad that should be viewed as an “alien”: It needs to be told exactly how to build a specific cube structure. The children, in groups of two, were given 10 minutes (after a short instruction how to use the iPads) to experiment at will with the Cubeling app. The settings on all iPads were set to 7 rows/columns. Loops and variables were initially deactivated and the type of cube was set to “wooden cubes.” Imagine you are architects and want to describe a cube structure to a computer so that it can model it. Unambiguity and clarity are of particular importance here. Find out everything the Cubeling app can do. The free experimenting trains children’s quick comprehension skills and essentially allows everyone to adjust to and become familiar with a new (in this case virtual) environment at their own speed. To increase communication and so that not as many technical devices are needed, the children can work in pairs. Afterwards, the most important functions of the app were compiled in a class discussion. At this point, it is not yet necessary to explain every minor detail. The most important questions that should be clarified in this round are the following: Which different views are there, what are they called, and how do I switch from one to the other? How do I add or remove cubes in the 3D view and in the building plan? How do I add or remove cubes in the code view? How can I hide one side? How can I remove all cubes (and the lines of code) at once? What do the colors blue and green represent? These questions are important in that they help the students get to know the most important functions and, as the project progresses, they can use the technical terms for the different views when communicating with each other. The code view is thus another possibility (apart from those usually already known) to display cube structures. This view does not necessarily have a special meaning at this point but is rather just one of many. What power it actually possesses will be explored as the project progresses. 3.2.6 Exercises on building cube structures This was followed by the first practice stage, which focused on a more in-depth engagement with the app. Complete tasks 1 to 4 on the worksheet! Tasks 1 to 4 guide the students through the individual views and functions of the app in a structured way. Some practical references (e.g., using cubes to construct letters on a checkerboard pattern, like on the displays in the train) are also included and can be made the subject of discussion verbally. Task 3 (“Build the largest possible X!”) already reveals a special feature: In the code view, it is theoretically possible to build beyond the 7x7 board and thus build an “infinitely” large X. This is, of course, not feasible in practice, and even a size of 100 squares in each direction is very tedious without a loop. This issue is again addressed in task 4 (“What happens when I build a cube outside the given range?”). The overall purpose of the tasks is to better understand the concept of the app’s code view. Students should not only be able to use the app but also understand why some functionalities or graphical symbols are presented the way they are. 3.3 Working with the code view You will need: iPads with the Cubeling app installed; Worksheet (tasks 5 to 7); Possibly the presentation with tasks Recommended app settings: Number of rows/columns: 7; Wooden cubes; Show coordinate numbers and colored axes; No loops or variables 3.3.1 Analysis of the code view As soon as the first students had finished tasks 1 to 4, task 4 was discussed together on the board. Tasks 1 to 3 are hard to compare and there was little need for discussion here. Smaller questions, especially geared towards the functionalities of the app, were mostly resolved during the individual work phase. The discussion of task 4 was focused on getting familiar with the code tracing. It will be needed in the subsequent tasks and for visualizing loops. This stage also provides opportunity for making ties to working with negative numbers and describing locations in the plane with the help of a special coordinate system. We did not go into depth here, instead working rather intuitively with everything, which did not present any difficulties for the students. The changeable values for variables provided support: If you touch a coordinate in the code view, you can change it step by step using the green or blue arrows - also into the negative range. The decision to be able to build beyond the borders provided by the app’s checkerboard, in both the positive and negative direction, was in part implemented to avoid faulty codes: At latest, problems would arise with larger loops. In principle, the app is designed in such a way that hardly any errors occur, and the questions in task 4 draw attention to those few that are possible. The key here is to encourage the children to ask questions like “What happens if…?” Incorrect or incomplete lines of code are not executed. 3.3.2 Using the code view After this, the students worked on the tasks on the back of the worksheet. Do tasks 5 to 7 on the worksheet! Task 5 (reflection of cube structure in the code view) initially involves recognizing the mathematical structure of the reflection. The question about the transfer to an 8x8 or 9x9 board is supposed to motivate the generalization of the task and the underlying rules. We took this opportunity to show the class how to increase the size of the board up to 10x10 squares in the settings. During our run through, some students found the number pairs 1 and 7, 2 and 6, 3 and 5, … and also intuitively recognized a pattern. But only after our hint, “What do the two numbers add up to?” were they able to formulate a rule. The observed connection was written down for all to see as follows: \\[ \\begin{align} green_\\mathrm{old} + green_\\mathrm{new} &amp;= 8, \\mathrm{therefore}\\\\ green_\\mathrm{new} &amp;= 8 - green_\\mathrm{old} \\end{align} \\] or in general, if \\(n\\) is the number of rows/columns: \\[ \\begin{align} green_\\mathrm{old} + green_\\mathrm{new} &amp;= n+1, \\mathrm{therefore}\\\\ green_\\mathrm{new} &amp;= n+1 - green_\\mathrm{old} \\end{align} \\] Whether the variables \\(n\\), \\(green_\\mathrm{old}\\), and \\(green_\\mathrm{new}\\) should actually be used or not depends greatly on the class. However, due to the concrete association with the built cube structures, no difficulties presented themselves in our run-through. Interestingly, this observed connection is independent of whether \\(n\\) is even or odd - though, when \\(n\\) is even, no cubes can be on the axis of reflection, but when n is odd, they can. In task 5 (step-by-step addition of lines of code to build three cube structures), cubes must be added and removed from structure 1 to structure 2 and structure 3, respectively. The goal is to gain a first insight into the fact that during the construction of a cube structure, several “partial structures” are already created as well. This progression is easy to follow in the code. We used task 7 as an additional task for students that finished ahead of everyone else. Here, the children generated their own structures. For further differentiation, you can ask about “particularly difficult” views. It can be addressed that some views are not unique and therefore one can easily confuse their partner. Supporting questions here are: Which views are unique? Why can I not tap to add cubes in all views? Can I build two different buildings that have the same multiview orthographic projection, the same oblique view, or the same isometric view? The fact that not all views allow adding cubes by touch is precisely due to the uniqueness. Only the 3D view and - for wooden cubes - the building plan and code view are unique. This discussion provides a good transition from the content of math lessons (uniqueness of projections, descriptions) to the code view in the app and thus to coding and working with algorithms. Coding (or programming) is therefore “only” an additional form of representation and made easily accessible to the children via the example of cube structures. 3.3.3 Distinction between process and product The second half of the lesson deals with the distinction between “process” and “product.” For this, we set up a relatively simple cube structure and the class received the following task: Build the cube structure in the code view! Compare the structure you have created with that of your neighbor. The following questions can help you: Has the same structure been created? Does it look like the one on the table at the front? Is the structure positioned correctly? Can you find a difference in any of the different views? Is one structure constructed “better” than the other? What might “better” mean in this context? In most cases, the same structure as the one up front at the teacher’s desk was built. However, due to a non-existent coordinate system, the structures were in different positions. In addition, it is possible to add cubes in a different order and to correct mistakes (for example, incorrectly placed cubes), which can still be seen in the code view. Especially the code view should stand out here, because it is not only the only always unique view, but it also stores information about the process of creation. The discussion about a “better” construction can easily lead to the advantages of “coding.” For this purpose, the students were reminded of the initial scenario (“Imagine you are architects”). The length of the code (as few errors as possible) as an evaluation criterion or the sequence in which the construction of a structure is planned can hence be of significance. To illustrate this, a student can be asked to construct a small wall of wooden blocks on the teacher’s desk. Mostly likely, for reasons of stability, they will not build and assemble little individual towers but rather stack rows on top of each other. The order can therefore also be of relevance in practice. In conclusion, the discussion can be summarized as follows: Compared to all other views, the code view provides us not only with a unique representation of the cube structure but also with a description of the construction process. The idea that a program or an algorithm is a fixed sequence of well-defined actions is fundamental and significant in many school subjects. Even though the informatics terms do not have to (but can) be discussed at this point, an intuitive idea of them is developed, which is elaborated by the use of loops and variables in the next two lesson blocks. Furthermore, the number of different ways to build the same cube structure were talked about: How many different ways are there to build the cube structure without using a remove command? Can I swap two commands at random, when looking only at the result? Try to build the structure with exactly 20 commands! Is that even possible? Which numbers of steps are possible? This exercise already uses combinatorial considerations. However, it is not so crucial to actually determine the correct number of possibilities. Rather, the students should become aware that there are different possibilities and that the code therefore describes the process of construction. 3.4 Loops and loop variables You will need: iPads with the Cubeling app installed; Possibly the presentation with tasks Recommended app settings: Number of rows/columns: 10; Wooden cubes; Show coordinate numbers and colored axes; Allow loops and variables 3.4.1 Introduction to repeat loops In this lesson block, repeat loops and loop variables were conveyed in a clear and understandable way. The students were taught how helpful these control structures are in creating a shorter and thus “better” code. Also, the performance of a computer and especially a code is emphasized. To this end, we worked on the construction of a wall a total of four times, always improving the approach. 1st wall construction: Without loops. To start, students were given the following task: Build a wall that is 11 cubes long and 6 cubes high! The task indirectly forces the use of the code view, since only it can add cubes outside of the 10x10 range. Afterwards, it was discussed that it seems to be extremely complicated and time-consuming to erect such a simple, in terms of its shape, cube structure. To motivate the students and as an outlook, the class can be briefly shown how, at the end of the lesson, the structure can be built with only 7 instead of the previous 66 rows. Additionally, the class can be stunned with how easily the height or length of the wall can be changed at will using the red arrow keys. This sparked noticeable amazement and ambition in the class, making the referral to the end goal a suitable lesson starter in this case. The structure can theoretically be much more easily described verbally. Because of this, one can refer to the verbal possibilities devised in the first lesson to describe a structure: For example, one can say “Do … x times!” Such an action is called a loop. To be able to use them in the app, loops and variables have to be allowed in the settings. Afterwards, we showed the children how to easily build a tower 50 cubes high with only 2 commands. The meaning of the curly brackets are explained during this (everything written inside them is repeated) and how they can change the number of repetitions using the red arrows (similar to the variables for specifying coordinates). They are then asked to try it out for themselves using the following example: Build a bulky 2x2 tower with a height of 30! The students were not used to the order of commands here. One would naturally rather say “Add cube at position … and do this … times!”; the code first requires the number of repetitions (“do … times”) and only then is the actual add-cube command inserted inside the curly brackets. By moving lines of code into the loop, however, this can also be done in the more intuitive order. This task again invites a discussion on the “best” code possible. For example, the codes shown in the figures both produce the same end product. Sequence tracing is a good basis for the discussion of these two possibilities. For this, we projected two iPads simultaneously onto the board using the software “Reflector” and then the children took turns showing the code tracing step by step. It became apparent that the first version builds the tower “floor by floor,” whereas the second version builds it “tower by tower.” The former is therefore not only shorter in its code, but the order of construction is also much more stable. This astonished many students, because even those who coded the first version did not necessarily expect a cube to be placed on each of the four squares before the next floor was built. This is mainly due to the fact that the code is executed “live,” i.e., if you type the second, third, or fourth command inside the loop, the complete code is executed immediately and the 3D view only shows the newly added cube towers - but not the order in which they were created. Of course, it remains to mention that the second version is not wrong, just less clever. The distinction between looking at the process or the product from the previous teaching unit becomes clear once again. In their playful zeal, the children will probably try to exhaust the height of the tower. Here, however, the iPad also reaches its limits, meaning when something is repeated 500 or so times, the iPad is likely to crash. In this case, close the app completely and launch it anew. 2nd wall construction: Loops without loop variables. Now that the students have been introduced to loops, they can build the 11x6 wall again. This is possible (as long as one doesn’t use double loops) with eleven loops of the type “do 6 times” - this results in a total of 33 lines of code. 3.4.2 Exploration of loop variables The use of eleven loops is already significantly better but not yet optimal. To improve the code further, the class is given ten minutes to work on the following task through trial and experimentation: Investigate for yourself what you can do with the commands position and change! Similar to the first lesson unit, the focus was put on discovery through trial (and error). It was interesting to note that the students were already using the functions somewhat more purposefully than in the first unit. The question “What happens if I …?” was heard much more frequently than in the previous lessons. Of course, this could also be due to the fact that the class was only asked to explore two functions here as opposed to a completely new app. Nevertheless, in our eyes, their approach has improved. 3.4.3 Systematically dealing with loop variables To develop the concept of loop variables, we briefly moved away from tablets and played the “construction workers’ game.” The goal was to have a visualization of the initial idea of the variables (called “positions” in the app) and how they change (“change by …”) during the construction process. For this we used, analogous to the app, a 7x7 field depicted on a carpet. The lines were also designed to correspond to those in the app. However, such a field can also be created relatively quickly using painter’s tape on the classroom floor. We also had a set of large wooden blocks (12 x 12 x 12 cm) that fit exactly into the squares of the marked playing field. Some students were given construction helmets, labeled with the letters A through D. These four students were also given a sign to put around their necks on which to write their current position with green and blue markers (most suitable here are laminated sheets of paper and non-permanent markers). The surrounding children helped with this, so that this activity did not take too much time. There was also an additional construction supervisor (with a different colored helmet). The teacher now serves as the architect by providing a code. The task of the construction supervisor is to instruct their workers which positions to take in each round and where to add or remove a cube accordingly. Afterwards, the finished structure could be compared to the one in the 3D view on the tablet. This game makes the dynamics of the process become apparent. The construction workers represent the positions specified in the code, which change throughout the course of the construction process. The construction supervisor has the task of executing the code correctly, e.g. counting the number of cycles of a loop. Of course, this game can be enriched with different roles and characters as you go along. After the first round, the roles can be switched among the students, so that all students had to play an active part at least once. It may even be a good idea to divide the class into 2 groups and prepare 2 playing fields, otherwise there will simply be too many people standing around the field and possibly even in each other’s way. It was surprising for us that the students had hardly any problems with the “change” command, although the coordinates given in it represent a shift and no longer a position. The command supports this with its notation “change(…, by: …),” whereas positions are written as “buildCube(at: …).” The game provides practice in using the commands by having to explicitly calculate the new positions. In addition, the app’s code tracing also shows what the current value of a position is at any given time. The different use of coordinates for positions and shifts is comparable to the position and direction vectors in secondary school. In our run-through, the following lesson block had some students who had difficulties with their code going to the carpet on their own and retracing the construction process there. As a teacher, you should therefore make this field (or alternatively one with small wooden cubes) permanently available, if space permits. 3rd wall construction: Loop with loop variables. With the help of loop variables, the 11x6 wall now requires only 6 loops of the type “do 11 times.” In every loop a position has been set, on which is built and then changed by (1,0) inside the loop. This further reduces the entire code to 30 lines of code. 3.5 Advanced exercises Up to this point, the students have become familiar with the entire app and should be able to use it on their own. The aim of this next block was extensive practice and actually working on mathematical or programming tasks. 3.5.1 Exercises on loop variables The first is to now move from the mundane execution of a code to the creation of your own by adhering to certain patterns. The use of loop variables is the most complex topic here and, as expected, requires some practice. Thus, at the beginning of the lesson, we briefly verbally reviewed what “position” and “change” commands can do. Then, the students were given the following task: Build a cube on any random square! From this square, continue building a row of 40 cubes in the following directions: - to the right - to the front - to the left - behind it - diagonally to the front right - diagonally to the front left - diagonally to the back left - diagonally to the back right Depending on how you look at the 3D view, you can also have “upwards” instead of “to the front” and “downwards” instead of “behind it.” We first used the term “upwards,” which resulted in some students building in height. The final result is a pattern that resembles a star. We also projected the final product on the board. The exercise might seem to be very time-consuming and simply a mindless repetition of the same thing over and over again. However, it proved challenging for the students to enter the correct changes of the loop variables. Especially dealing with transitions into negative numbers was - understandably - not intuitive. Still, the children remained on top of it - the prospect of the finished cube structure seems to have been motivation enough to want to successfully solve the task. 3.5.2 Discussions on live coding The fact that the app always executes the code immediately is certainly intended to help the students. Nevertheless, it can also confuse learners, which should be addressed in class. In fact, this occurred relatively frequently. Suppose one built a cube on the square (4,4) and now wants to build a row of 40 cubes forward from there. The finished code looks like this: Many students also had this correct idea but got confused before they had added the “change” command: At this point, the live code returns a tower at (4,5). The students now thought they had done something wrong, since they surely did not want to have a tower here. It was then discussed with the class why the app was doing this. If the students get too confused, a good first step is to temporarily hide the left side of the app and check it only after the code is complete. This live code discussion can certainly be had at a different point in time. We have included it here because a lot of students noticed it when building the rows of 40. 3.5.3 Double loops 4th wall construction: Double loops. Most of the children felt relatively confident with the use of the loop variables after the exercise. Before the students were now allowed to engage in final practice, the assessment of the most compact way to build the 11x6 wall took place. By again utilzing the practical demonstration on the playing field carpet, the code was first developed, in words, as a class: You build 6 cubes on top of each other and then move one square to the right. You have to do this whole process 11 times in a row. The development of the code with words was very helpful and was recorded on the board in a “pseudo” language: Step 1: build a tower of 6 go one step to the right build another tower of 6 do this 11 times Step 2: do 11 times { build a tower of 6 go one step to the right } Step 3: set positionA to (1,1) do 11 times { build tower of 6 at positionA change positionA by (1,0) } Now, it was still necessary to translate this into the cubeling programming language, i.e., lastly expressing the construction of the tower in code. This results in a loop within the loop. One student from the class generated this code while their iPad was projected live on the board. Afterwards, everyone recreated this code again for themselves and tested how changing 11 and 6 using the red arrows could easily add or remove rows or columns from the wall. The code was thus reduced to 7 lines - from the original 66. It can also be discussed that the code tracing makes it clear that this code is not particularly practical when it comes to the stability of the construction process (since it is built tower by tower and not floor by floor). This is due to the programming language, as you do not have to change the positions for towers, thus reducing the number of lines of code. As an additional task at the end of the lesson, the students can think about how the code would have to look if we wanted to build one row on top of the other instead. Is it still as easy to add further rows or columns? Why not? 3.5.4 Complex exercises Finally, the students were sent screenshots of more complex structures via AirDrop, which they now had to recreate as effectively as possible using loops and loop variables. The tasks become more and more complicated, building up to a triple loop for a large cube. Write a code to build the cube structures! These tasks again offer the potential to discuss different ways of solving the problem and to think about optimizing the code. At the same time, the creativity of the students can be encouraged here when creating their own structures. 3.6 Summary and next steps At the end of the lesson, the class was asked to evaluate the project phase and express any wishes. A common answer was that they had learned how practical and powerful the code view is, and that they had initially shied away from working with it but now actually prefer it (“At the start I did not find coding very exciting, I preferred building in the 3D view. But now that we have the loops, I prefer to do it with the code.”). In addition, some children wished for colored cubes in the app or the ability to code with the stacking cubes as well, to, for example, be able to construct houses with windows. There was a lot of enthusiasm visible for learning “how to be an architect” and how to code, with many students asking questions like inquiring about the alternative method for the 11x6 wall, even after the bell had rung. We were also frequently asked if there was a way to use the app for playing around at home. The interest of the class and the enthusiasm about this rather unusual way of solving tasks was very apparent. From a didactic point of view, we want to once again emphasize that the app is limited in complexity. Colored cubes or stackable cubes are not possible and are not something we are working on. The aim is to use the app to gain an insight into the basic ideas of coding, in particular of loops, using the representation of cube structures. Further learning can then be done with programs such as Minecraft (see e.g. https://minecraft.fandom.com/wiki/Coordinates), where there are seemingly no limits to one’s creativity. For example ones found on www.holzwuerfel.com↩︎ "],["Literature.html", "4 More materials and literature More materials Literature (German)", " 4 More materials and literature More materials general Kopiervorlage Bauplan (2x2cm pro Feld ) als pdf-Datei als pages-Datei als docx-Datei Kopiervorlage Bauplan kompakt (pro Feld 1x1cm) als pdf-Datei als pages-Datei als docx-Datei Kopiervorlage Zweitafelbild als pdf-Datei als pages-Datei als docx-Datei Kopiervorlage Dreitafelbild als pdf-Datei als pages-Datei als docx-Datei Kopiervorlage Isometriepapier als pdf-Datei als pages-Datei als docx-Datei Punktemuster als cinderalla-Datei zum Programmieren mit Klötzchen Arbeitsblatt als pdf-Datei als pages-Datei als docx-Datei Präsentation mit Aufgabenstellungen als pdf-Datei als keynote-Datei als pptx-Datei Lösungen zu den komplexen Übungen (Abschnitt 3.5.4) als cubl-Dateien Die Lösungen stellen nicht zwingend einen optimalen Code dar. Gebäude 1 Gebäude 2 Gebäude 3 Gebäude 4 Gebäude 5 Gebäude 6 Gebäude 7 Gebäude 8 Literature (German) Bönig, D., &amp; Thöne, B. (2018). Die Klötzchen-App im Mathematikunterricht der Grundschule – Potentiale und Einsatzmöglichkeiten. In S. Ladel, U. Kortenkamp, &amp; H. Etzold (Eds.), Mathematik mit digitalen Medien – konkret (1st Edition, pp. 7–28). WTM-Verlag. https://doi.org/10.37626/GA9783959870788.0.02 Deutschschweizer Erziehungsdirektoren-Konferenz (D-EDK). (2016). Medien und Informatik. Lehrplan 21 - von der D-EDK Plenarversammlung am 31.10.2014 zur Einführung in den Kantonen freigegebene Vorlage. Bereinigte Fassung vom 29.02.2016. https://v-fe.lehrplan.ch/container/V_FE_DE_Modul_MI.pdf Etzold, H., &amp; Janke, S. (2018a). Schleifen und Strukturen – Leitfaden für Lehrerinnen und Lehrer. Teil 1: Hintergrund und Erfahrungsbericht (Version 1). Zenodo. https://doi.org/10.5281/zenodo.4747400 Etzold, H., &amp; Janke, S. (2018b). Schleifen und Strukturen – Leitfaden für Lehrerinnen und Lehrer. Teil 2: Materialsammlung (Version 1). Zenodo. https://doi.org/10.5281/zenodo.4747521 Ladel, S., &amp; Kuzle, A. (2017). Einsatz virtueller Materialien zum Thema „Förderung des räumlichen Vorstellungsvermögens“ am Beispiel der App Klötzchen. In S. Ladel, C. Schreiber, &amp; R. Rink (Eds.), Digitale Medien im Mathematikunterricht der Primarstufe. Ein Handbuch für die Lehrerausbildung. 3. Band der Reihe Lernen, Lehren und Forschen mit digitalen Medien in der Primarstufe (pp. 131–148). WTM-Verlag. PIKAS digi (Ed.). (2020). Klötzchen. Eine App zur Konstruktion und Betrachtung von Würfelbauwerken. https://pikas-digi.dzlm.de/sites/pikasdg/files/uploads/Unterricht/Kloetzchen/um_kloetzchen.pdf Pilgrim, A. (2018). Tablet-Einsatz im Mathematikunterricht der Grundschule: Unterrichtserprobungen zum Thema Dreitafelprojektion. In A. S. Steinweg (Ed.), Inhalte im Fokus – Mathematische Strategien entwickeln. Tagungsband des AK Grundschule in der GDM 2018 (pp. 101–104). University of Bamberg Press. https://doi.org/10.20378/irbo-53233 Rahn, A., &amp; Dilling, F. (2020). „Die Würfel auf dem Tablet waren aber anders“ – Zur Kontextgebundenheit des Wissens bei Stationenarbeiten mit Digitalen Medien. In F. Dilling &amp; F. Pielsticker (Eds.), Mathematische Lehr-Lernprozesse im Kontext digitaler Medien (pp. 247–270). Springer Fachmedien Wiesbaden. https://doi.org/10.1007/978-3-658-31996-0_11 Sekretariat der Kultusministerkonferenz (KMK). (2016). Bildung in der digitalen Welt. Strategie der Kultusministerkonferenz. Beschluss der Kultusministerkonferenz vom 08.12. 2016 in der Fassung vom 07.12.2017. https://www.kmk.org/fileadmin/Dateien/pdf/PresseUndAktuelles/2018/Digitalstrategie_2017_mit_Weiterbildung.pdf Sekretariat der Ständigen Konferenz der Kultusminister der Länder in der Bundesrepublik Deutschland (KMK). (2004). Bildungsstandards im Fach Mathematik für den Mittleren Schulabschluss. Beschluss vom 4.12.2003. Luchterhand. https://www.kmk.org/fileadmin/Dateien/veroeffentlichungen_beschluesse/2003/2003_12_04-Bildungsstandards-Mathe-Mittleren-SA.pdf Sekretariat der Ständigen Konferenz der Kultusminister der Länder in der Bundesrepublik Deutschland (KMK). (2005). Bildungsstandards im Fach Mathematik für den Primarbereich. Beschluss vom 15.10. 2004. Luchterhand. https://www.kmk.org/fileadmin/Dateien/veroeffentlichungen_beschluesse/2004/2004_10_15-Bildungsstandards-Mathe-Primar.pdf "]]
